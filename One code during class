#include <iostream>
using namespace std;

class Base {
private:
	int a;

public:
	int b;

protected:
	int c;

public:// 생성자
	Base() {
		a = 1;
		b = 2;
		c = 3;
	}
};

class Derivel1 :private Base {// private 상속
public:
	void func() {
		//cout << a << endl; 접근 실패
		cout << b << endl;
		cout << c << endl;
	}

};
class Derivel2 : public Base {
public:
	void func() {
		//cout << a << endl; 접근 실패
		cout << b << endl;
		cout << c << endl;

	}
};
class Derivel3 :protected Base {
public:
	void func() {
		//cout << a << endl; 접근 실패
		cout << b << endl;
		cout << c << endl;
	}

};

int main() {
	Derivel1 d1;
	Derivel2 d2;
	Derivel3 d3;

	cout << " Derivel1 " << endl;
	d1.func();

	cout << " Derivel2" << endl;
	d2.func();

	cout << " Derivel3 " << endl;
	d3.func();

	return 0;
}


#include <iostream>
#include <string>
using namespace std;

// 부모 클래스 (기반 클래스)
class Person {
protected:
	string name;
	int age;

public:
	Person(string n, int a) : name(n), age(a) {}

	void introduce() {
		cout << "이름: " << name << ", 나이: " << age << endl;
	}
};

// 자식 클래스 (파생 클래스)
class Student : public Person {
private:
	string major;

public:
	Student(string n, int a, string m) : Person(n, a), major(m) {}

	void study() {
		cout << name << " 학생이 " << major << " 전공 공부 중입니다." << endl;
	}
};

int main() {
	Student s("김경건", 23, "게임공학");
	s.introduce();   // 부모 클래스 함수 사용
	s.study();       // 자식 클래스 함수 사용
	return 0;
}
